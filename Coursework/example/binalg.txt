// бинарный алгоритм Стейна
#include "stdafx.h"
#include <iostream>
#include <conio.h>
#include <math.h>
#include "windows.h"

using namespace std;

unsigned long long int gcd(unsigned long long int a, unsigned long long int b)
{
    unsigned long long int buf, deg = 0;

    if (a == 0 || b == 0)//если a или b равно нулю
        return a | b;    //возвращаем a + b

    while (((a | b) & 1) == 0)//пока a и b нечётны
    {
        deg++;  //увеличиваем степень двойки на единицу
        a >>= 1;//делим a и b нацело на 2
        b >>= 1;
    }
    
    if (a) 		    //если a не равно нулю
        while ((a & 1) == 0)//пока a чётно
            a >>= 1;        //делим его на 2
    
    while (b)//пока b не равно нулю
    {
        while ((b & 1) == 0)//пока b чётно
            b >>= 1;        //делим его на 2

        if (a < b) 	//если a < b
            b -= a;	//вычитаем из b число a 
        else       	//иначе
        {
            buf = a - b;//сохраняем a - b
            a = b;	//присваиваем a число b
            b = buf;	//присваиваем b сохранённую разность
        }
        b >>= 1;	//делим b нацело на 2
    }

    //возвращаем a умноженное на 2 в степени deg 
    return (a << deg); 
}

int main()
{
	//объявление переменных, предназначенных
	//для вычисления времени работы программы
	LARGE_INTEGER start, finish, freq;

	unsigned long long int a, b, nod;
	//a,b - исходные числа
	//nod - наибольший общий делитель

	cin >> a >> b;
	
	
	// запоминаем частоту операций
	
	QueryPerformanceFrequency( &freq );
	
	// засекаем начало работы алгоритма
	
	QueryPerformanceCounter( &start );

	nod = gcd(a,b);

	cout << nod << endl;//наибольший общий делитель

	cout << a*b/nod << endl;//наименьшее общее кратное
	

	// time - время в секундах
	
	double time = (finish.QuadPart - start.QuadPart) / (double)freq.QuadPart;
	
	cout << time << endl;  
	
	getch();
    	return 0;
}